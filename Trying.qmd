---
output: html_document
editor_options: 
  chunk_output_type: inline
---

```{r}
# Install and load the required package
install.packages("plotly")
library(plotly)

#3D surface



# Create the 3D surface plot
fig <- plot_ly(x = all_results_df_SCCPs$`Homologue`, 
               y = all_results_df_SCCPs$`Relative_distribution`, 
               z = all_results_df_SCCPs$`Replicate Name`, 
               type = "surface",
                marker = list(color = all_results_df_SCCPs$`Replicate Name`),
                colorbar = list(title = "Replicate Name"),
                colorscale = "Viridis"
               )
               

# Customize the layout
fig <- fig |> layout(
  scene = list(
    xaxis = list(title = "Homologue"),
    yaxis = list(title = "Relative distribution"),
    zaxis = list(title = "Replicate name")
  )
)

# Show the plot
fig

```


```{r}
#Scatter pot


# Create the 3D scatter plot
fig <- plot_ly(
  x = all_results_df_SCCPs$`Replicate Name`, 
  y = all_results_df_SCCPs$`Homologue`, 
  z = all_results_df_SCCPs$`Relative_distribution`, 
  type = "scatter3d", 
  mode = "markers",
  marker = list(
    color = x,
    colors = c("orange", "green", "purple")
  )
)
# Customize the layout
fig <- fig |>  layout(
  scene = list(
    xaxis = list(title = "Sample"),
    yaxis = list(title = "Homologue"),
    zaxis = list(title = "Relative distribution")
  )
)

# Show the plot
fig

```


```{r}


# Sample data for the donut chart
all_results_df_SCCPs2<-all_results_df_SCCPs |> 
filter(str_detect(Homologue, "NIST_R2", negate = TRUE))|>#Exclude the other samples
filter(str_detect(Homologue, "NIST_R3", negate = TRUE))#Exclude the other samples

# Create the donut chart
fig <- plot_ly(labels = all_results_df_SCCPs2$`Homologue`, values = all_results_df_SCCPs2$`Relative_distribution`, type = "pie", hole = 0.4)

# Customize the layout
fig <- fig  |>  layout(
  title = "Donut Chart for homologue distribution"
)

# Show the plot
fig

```

```{r}
#Line chart to see the homologue distribution 

fig <- plot_ly(
  x = all_results_df_SCCPs2$Simulated_pattern, 
  y = all_results_df_SCCPs2$Homologue, 
  type = "scatter", 
  mode = "lines"
)

# Customize the layout
fig <- fig %>% layout(
  title = "Line Chart",
  xaxis = list(title = "Simulated Pattern"),
  yaxis = list(title = "Homologue")
)

# Show the plot
fig


#Line chart to check the differences between the measured and the simulated for one homologue
# Selct which row of the data frame
row_to_plot <- all_results_df_SCCPs[1:8, ]

fig <- plot_ly(
  x = row_to_plot$Simulated_pattern, 
  y = row_to_plot$`Relative_distribution`, 
  type = "scatter", 
  mode = "lines"
)

# Customize the layout
fig <- fig %>% layout(
  title = "PCAs-C10",
  xaxis = list(title = "Simulated Pattern"),
  yaxis = list(title = "Relative_distribution")
)

# Show the plot
fig
```


```{r}
#Bar Chart

# Define color mapping
colors <- c("orange", "green", "purple")  # Define colors for each replicate name
unique_replicates <- unique(all_results_df_SCCPs$`Replicate Name`)
color_mapping <- setNames(colors, unique_replicates)

# Create the plot
fig <- plot_ly(
  x = all_results_df_SCCPs$Homologue, 
  y = all_results_df_SCCPs$Relative_distribution, 
  type = "bar",
  marker = list(color = sapply(all_results_df_SCCPs$`Replicate Name`, function(rep) color_mapping[rep]))
)

# Customize the layout
fig <- fig  |>  
  layout(
    title = "Bar Chart Homologue distribution",
    xaxis = list(title = "Homologue"),
    yaxis = list(title = "Relative distribution")
  )

# Show the plot
fig



#####One bar per sample


```



```{r}
#Box plot


# Create the box plot
fig <- plot_ly(x = all_results_df_SCCPs$`Replicate Name`, y = all_results_df_SCCPs$`Relative_distribution`, 
               type = "box",
               box = list(
               color = ~all_results_df_SCCPs$`Replicate Name`
  ) )

# Customize the layout
fig <- fig |> layout(
  title = "Box Plot diferences between samples",
  xaxis = list(title = "Samples"),
  yaxis = list(title = "Relative distribution")
  )

# Show the plot
fig

```

```{r}
#Heat map

# Reshape the data into a matrix format for the heatmap
z <- matrix(all_results_df_SCCPs$Relative_distribution, nrow = nrow(all_results_df_SCCPs))

# Define row and column names for the heatmap
homologues <- unique(all_results_df_SCCPs$Homologue)
samples <- unique(all_results_df_SCCPs$`Replicate Name`)
colnames(z) <- samples
rownames(z) <- homologues

# Create the heatmap
fig <- plot_ly(z = ~z, x = samples, y = homologues, type = "heatmap")

# Customize the layout
fig <- fig %>% layout(
  title = "Heatmap of Relative Distribution of Homologues between Samples",
  xaxis = list(title = "Sample"),
  yaxis = list(title = "Homologue")
)

# Show the plot
fig

```

```{r}
#Bubble chart

# Sample data for the bubble chart
size <- runif(nrow(all_results_df_SCCPs2), min = 0.0, max = 0.2)

# Create the bubble chart
fig <- plot_ly(x = all_results_df_SCCPs2$`Relative_distribution`, 
               y = all_results_df_SCCPs2$Homologue, 
               type = "scatter", 
               mode = "markers", 
               marker = list(size = size),
               )

# Customize the layout
fig <- fig |>  layout(
  title = "Bubble Chart Example",
  xaxis = list(title = "X Axis"),
  yaxis = list(title = "Y Axis")
)

# Show the plot
fig

```

```{r}
#Violin plot

# Create the violin plot with customized hover text
fig <- plot_ly(
  x = all_results_df_SCCPs2$`Replicate Name`, 
  y = all_results_df_SCCPs2$`Relative_distribution`, 
  type = "violin",
  #to change the label that shower when passing the cursor
  text = paste("Replicate Name: ", all_results_df_SCCPs2$`Replicate Name`, "<br>",
               "Relative Distribution: ", all_results_df_SCCPs2$`Relative_distribution`, 
               "Homlogue:", all_results_df_SCCPs2$Homologue),
  color = all_results_df_SCCPs2$`Replicate Name`
)

# Customize the layout
fig <- fig  |>  layout(
  title = "Violin Plot for the samples",
  xaxis = list(title = "Samples"),
  yaxis = list(title = "Relative distribution")
)

# Show the plot
fig


```


```{r}
# Load necessary libraries


# Select rows for NISTR1 and NISTR2
NISTR1 <- all_results_df_SCCPs[1:37, c("Concentration")]
NISTR2 <- all_results_df_SCCPs[38:70, c("Concentration")]

# Combine NISTR1 and NISTR2 into a single data frame
combined_data <- rbind(NISTR1, NISTR2)

# Perform PCA
pca_result <- prcomp(combined_data, scale. = TRUE)

# Extract PCA scores
pca_scores <- as.data.frame(pca_result$x)

# Create PCA plot
fig <- plot_ly(
  x = ~pca_scores$PC1,
  y = ~pca_scores$PC2,
  type = "scatter",
  mode = "markers"
)

# Customize the layout
fig <- fig |>  
  layout(
    title = "PCA Plot",
    xaxis = list(title = "PC1"),
    yaxis = list(title = "PC2")
  )

# Show the plot
fig



```

